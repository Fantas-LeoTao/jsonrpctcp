JSONRPCTCP
==========

This project is just an implementation of the JSON-RPC protocol over
TCP. It should support most of the JSON-RPC 2.0 specification, but it is 
not (at this point) backwards-compatible with 1.0, because I don't like it 
as much. :) It's early on, so feedback is greatly desired.

JSONRPCTCP is licensed under the Apache Licence, Version 2.0
(http://www.apache.org/licenses/LICENSE-2.0.html).

Requirements
============
* Python 2.5+
* SimpleJSON on Python < 2.6

Installation
============

    python setup.py build
    sudo python setup.py install

Tests
=====
The jsonrpctcp library contains nearly-verbatim tests from the
JSON-RPC 2.0 Specification Document. 
(http://groups.google.com/group/json-rpc/web/json-rpc-2-0)

After installation, or from the same directory as the setup.py
file and this README, you can run the tests like so:

    python -m jsonrpctcp.tests

If all is well, you should see 12ish tests that ran successfully.

Additionally, you can spin up a test server in one terminal
and run a few test client methods in another with the following
instructions. (These tests are not as detailed, but it's there
for whatever purpose.)

Start server (hit Ctrl-C or Ctrl-Break in Windows to stop): 
    python -m jsonrpctcp.server
   
Start client in another terminal:
    python -m jsonrpctcp.client

The client terminal should print out a short list of tests it
performed.

Client Usage
============

This should be pretty familiar to users of xmlrpclib, with only a few
name differences.

Client examples:

    # Simple example
    from jsonrpctcp import connect
    
    conn = connect('localhost', 8080)
    result = conn.add(1, 2)
    # ...and should be 3, except for extremely large values of 2. :)
    
    # Notification example
    conn._notification.add(5, 6)
    # Null response, because it's a notification.
    
    # Batch example
    batch = conn._batch()
    batch.add(y=5, x=6)
    batch._notification.add(6,4)
    batch.namespace.echo("Repeat me!")
    result = batch()
    for i in result:
        print i
    # Should print out 11, and then "Repeat me!", skippinig the notification.
    
    # You can access the request and response data with
    # conn._response and conn._request -- only AFTER a request is made.
    

Server Usage
============

The server is bound to a socket, and the handler function(s) can be passed 
in manually one by one, or (preferred) you can subclass the Handler object
and use that. It threads (not forks) the individual requests for you, but
if you don't use the start_server() shortcut, you'll have to thread the 
actual server startup yourself if you want to do anything after it starts.

Server examples:

    # Handler example
    from jsonrpctcp import start_server
    from jsonrpctcp.handler import Handler
    import time
    
    class NewHandler(Handler):
        def echo(self, message):
            return message
   
    # This automatically threads the server instance.     
    server = start_server('localhost', 8080, NewHandler)
    
    while True:
        # Do whatever you need for polling
        time.sleep(5)
        
    ------------------
        
    # Handler example
    from jsonrpctcp.server import Server
    from jsonrpctcp import config
    
    config.verbose = True
            
    def add(x, y):
        return x+y
        
    def echo(message):
        return message
        
    server = Server(('localhost', 8080))
    server.add_handler(add)
    server.add_handler(echo, 'namespace.echo')
    server.serve()
    
    # You'll have to thread the start up yourself this way, if you need it.
    
Configuration
=============

There's a simple configuration object that has three attributes. You can
change them per the following:

    from jsonrpctcp import config
    
    config.verbose = True # default is False
    config.timeout = 30 # default is 5
    config.buffer = 4096 # default is 1024
    
These may not be the best defaults, any thoughts would be appreciated.

Debugging
=========

If you want to see the actual requests, responses, etc. you'll need to
add a handler and set a level to the jsonrpctcp logger. This uses the
basic python logging module, so it should be fairly familiar:

	import loggging
	from jsonrpctcp import logger
	logger.addHandler(logging.StreamHandler()) # sends to stdout
	logger.setLevel(logging.DEBUG)
